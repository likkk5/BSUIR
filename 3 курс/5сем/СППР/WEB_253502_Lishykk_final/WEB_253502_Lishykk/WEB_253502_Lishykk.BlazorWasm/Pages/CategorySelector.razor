@inject IDataService DataService

<div class="mb-4">
    @if (DataService.Categories == null || DataService.Categories.Count == 0)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Загрузка категорий...</span>
        </div>
    }
    else
    {
        <label for="category-select" class="form-label fw-bold">Выберите категорию:</label>
        <select id="category-select" class="form-select" @onchange="OnCategoryChanged">
            <option value="All" selected="@(DataService.SelectedCategory == null)">Все категории</option>
            @foreach (var category in DataService.Categories)
            {
                <option value="@category.NormalizedName"
                        selected="@(DataService.SelectedCategory?.NormalizedName == category.NormalizedName)">
                    @category.Name
                </option>
            }
        </select>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        // Подписываемся на событие обновления данных
        DataService.DataLoaded += StateHasChanged;
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        if (selectedValue == "All")
        {
            DataService.SelectedCategory = null;
        }
        else
        {
            DataService.SelectedCategory = DataService.Categories
                .FirstOrDefault(c => c.NormalizedName == selectedValue);
        }

        // Запрашиваем данные для выбранной категории
        await DataService.GetCarListAsync(DataService.SelectedCategory?.NormalizedName);
    }

    public void Dispose()
    {
        // Отписываемся от события при уничтожении компонента
        DataService.DataLoaded -= StateHasChanged;
    }
}
