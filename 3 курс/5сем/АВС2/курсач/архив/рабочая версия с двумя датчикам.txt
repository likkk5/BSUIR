#!/usr/bin/python
import time
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)


'''
define pin for lcd
'''
# Timing constants
E_PULSE = 0.0005
E_DELAY = 0.0005
delay = 1

DETECTION_CONFIDENCE = 3  # Number of consecutive detections to confirm gas presence
FAULT_TIMEOUT = 30         # Timeout (in seconds) to consider a sensor faulty if it stays in a constant state
CHECK_INTERVAL = 0.5       # Interval between gas checks
debounce_delay = 0.2

# Initialize variables for fault detection and debounce tracking
sensor1_faulty = False
sensor2_faulty = False
sensor1_stable_state = None
sensor2_stable_state = None
sensor1_stable_start = None
sensor2_stable_start = None
gas_confidence_count = 0

buzzer=37
GPIO.setup(buzzer, GPIO.OUT)  

# Define GPIO to LCD mapping
LCD_RS = 7
LCD_E  = 11
LCD_D4 = 12
LCD_D5 = 13
LCD_D6 = 15
LCD_D7 = 16
gas_Sensor = 18
gas_Sensor2 = 22
red_light = 31

Buzzer= 29
GPIO.setup(LCD_E, GPIO.OUT)  # E
GPIO.setup(LCD_RS, GPIO.OUT) # RS
GPIO.setup(LCD_D4, GPIO.OUT) # DB4
GPIO.setup(LCD_D5, GPIO.OUT) # DB5
GPIO.setup(LCD_D6, GPIO.OUT) # DB6

GPIO.setup(LCD_D7, GPIO.OUT) # DB7
GPIO.setup(gas_Sensor, GPIO.IN) # DB7
GPIO.setup(gas_Sensor2, GPIO.IN)
GPIO.setup(red_light, GPIO.OUT)
GPIO.setup(Buzzer, GPIO.OUT)
# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False
LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line

'''
Function Name :lcd_init()
Function Description : this function is used to initialized lcd by sending the different commands
'''
def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD) # 110011 Initialise
  lcd_byte(0x32,LCD_CMD) # 110010 Initialise
  lcd_byte(0x06,LCD_CMD) # 000110 Cursor move direction
  lcd_byte(0x0C,LCD_CMD) # 001100 Display On,Cursor Off, Blink Off
  lcd_byte(0x28,LCD_CMD) # 101000 Data length, number of lines, font size
  lcd_byte(0x01,LCD_CMD) # 000001 Clear display
  time.sleep(E_DELAY)
'''
Function Name :lcd_byte(bits ,mode)
Fuction Name :the main purpose of this function to convert the byte data into bit and send to lcd port
'''
def lcd_byte(bits, mode):
  # Send byte to data pins
  # bits = data
  # mode = True  for character
  #        False for command
 
  GPIO.output(LCD_RS, mode) # RS
 
  # High bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&0x80==0x80:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin
  lcd_toggle_enable()
 
  # Low bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&0x08==0x08:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin
  lcd_toggle_enable()
'''
Function Name : lcd_toggle_enable()
Function Description:basically this is used to toggle Enable pin
'''
def lcd_toggle_enable():
  # Toggle enable
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)
'''
Function Name :lcd_string(message,line)
Function  Description :print the data on lcd 
'''
def lcd_string(message,line):
  # Send string to display
 
  message = message.ljust(LCD_WIDTH," ")
 
  lcd_byte(line, LCD_CMD)
 
  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)

def detect_fault(sensor_pin, stable_state, stable_start, faulty_flag):
    current_state = GPIO.input(sensor_pin)
    if stable_state is None or current_state != stable_state:
        stable_state = current_state
        stable_start = time.time()
    elif time.time() - stable_start > FAULT_TIMEOUT:
        faulty_flag = True
    return stable_state, stable_start, faulty_flag
    
lcd_init()
lcd_string("welcome ",LCD_LINE_1)
time.sleep(1)
# Define delay between readings
delay = 5

while True:
    # Track if sensors become faulty
    sensor1_stable_state, sensor1_stable_start, sensor1_faulty = detect_fault(gas_Sensor, sensor1_stable_state, sensor1_stable_start, sensor1_faulty)
    sensor2_stable_state, sensor2_stable_start, sensor2_faulty = detect_fault(gas_Sensor2, sensor2_stable_state, sensor2_stable_start, sensor2_faulty)

    # Read gas sensor values, considering faults
    sensor1_value = GPIO.input(gas_Sensor) if not sensor1_faulty else 0
    sensor2_value = GPIO.input(gas_Sensor2) if not sensor2_faulty else 0
    gas_detected = sensor1_value or sensor2_value

    # Debounce and confirm detection
    if gas_detected:
        gas_confidence_count += 1
        if gas_confidence_count >= DETECTION_CONFIDENCE:
            lcd_string("Gas Detected", LCD_LINE_1)
            GPIO.output(Buzzer, True)
            GPIO.output(red_light, True)
            gas_confidence_count = DETECTION_CONFIDENCE
    else:
        gas_confidence_count -= 1
        if gas_confidence_count <= 0:
            lcd_string("Gas Not Detected", LCD_LINE_1)
            GPIO.output(Buzzer, False)
            GPIO.output(red_light, False)
            gas_confidence_count = 0

    # Show warnings on LCD if any sensors are faulty
    if sensor1_faulty:
        lcd_string("Sensor 1 Fault", LCD_LINE_2)
    elif sensor2_faulty:
        lcd_string("Sensor 2 Fault", LCD_LINE_2)
    else:
        lcd_string("                ", LCD_LINE_2)  # Clear fault line if no faults

    time.sleep(CHECK_INTERVAL)
  