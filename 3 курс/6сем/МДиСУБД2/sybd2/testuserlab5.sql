CREATE TABLE customers (
    customer_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    full_name   VARCHAR2(100) NOT NULL,
    status_code NUMBER,
    created_at  DATE DEFAULT SYSDATE,
    CONSTRAINT pk_customers PRIMARY KEY (customer_id)
);

CREATE TABLE orders (
    order_id    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    customer_id NUMBER NOT NULL,
    order_date  DATE DEFAULT SYSDATE,
    comment_text VARCHAR2(200),
    amount      NUMBER,
    CONSTRAINT pk_orders PRIMARY KEY (order_id),
    CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id)
       REFERENCES customers (customer_id)
);

CREATE TABLE order_items (
    order_item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    order_id      NUMBER NOT NULL,
    product_name  VARCHAR2(100),
    qty           NUMBER,
    created_at    DATE DEFAULT SYSDATE,
    CONSTRAINT pk_order_items PRIMARY KEY (order_item_id),
    CONSTRAINT fk_order_items_order FOREIGN KEY (order_id)
       REFERENCES orders (order_id)
);

CREATE TABLE audit_log (
    audit_id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    table_name     VARCHAR2(50),
    pk_value       VARCHAR2(100),
    changed_data   VARCHAR2(4000),
    operation_type CHAR(1),
    change_time    TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
    CONSTRAINT pk_audit_log PRIMARY KEY (audit_id)
);

CREATE OR REPLACE TRIGGER trg_customers_audit
BEFORE INSERT OR UPDATE OR DELETE ON customers 
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'CUSTOMERS',
          TO_CHAR(:NEW.customer_id),
          'full_name=' || :NEW.full_name || ', status_code=' || :NEW.status_code || ', created_at=' ||
              TO_CHAR(:NEW.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'I'
        );
    ELSIF UPDATING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'CUSTOMERS',
          TO_CHAR(:OLD.customer_id), --фиксир старые до обновления
          'full_name=' || :OLD.full_name || ', status_code=' || :OLD.status_code || ', created_at=' ||
              TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'U'
        );
    ELSIF DELETING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'CUSTOMERS',
          TO_CHAR(:OLD.customer_id),
          'full_name=' || :OLD.full_name || ', status_code=' || :OLD.status_code || ', created_at=' ||
              TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'D'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_orders_audit
BEFORE INSERT OR UPDATE OR DELETE ON orders
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDERS',
          TO_CHAR(:NEW.order_id),
          'customer_id=' || :NEW.customer_id || ', order_date=' || TO_CHAR(:NEW.order_date, 'YYYY-MM-DD HH24:MI:SS') ||
              ', comment_text=' || :NEW.comment_text || ', amount=' || :NEW.amount,
          'I'
        );
    ELSIF UPDATING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDERS',
          TO_CHAR(:OLD.order_id),
          'customer_id=' || :OLD.customer_id || ', order_date=' || TO_CHAR(:OLD.order_date, 'YYYY-MM-DD HH24:MI:SS') ||
              ', comment_text=' || :OLD.comment_text || ', amount=' || :OLD.amount,
          'U'
        );
    ELSIF DELETING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDERS',
          TO_CHAR(:OLD.order_id),
          'customer_id=' || :OLD.customer_id || ', order_date=' || TO_CHAR(:OLD.order_date, 'YYYY-MM-DD HH24:MI:SS') ||
              ', comment_text=' || :OLD.comment_text || ', amount=' || :OLD.amount,
          'D'
        );
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_order_items_audit
BEFORE INSERT OR UPDATE OR DELETE ON order_items
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDER_ITEMS',
          TO_CHAR(:NEW.order_item_id),
          'order_id=' || :NEW.order_id || ', product_name=' || :NEW.product_name || ', qty=' || :NEW.qty ||
              ', created_at=' || TO_CHAR(:NEW.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'I'
        );
    ELSIF UPDATING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDER_ITEMS',
          TO_CHAR(:OLD.order_item_id),
          'order_id=' || :OLD.order_id || ', product_name=' || :OLD.product_name || ', qty=' || :OLD.qty ||
              ', created_at=' || TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'U'
        );
    ELSIF DELETING THEN
        INSERT INTO audit_log (table_name, pk_value, changed_data, operation_type)
        VALUES (
          'ORDER_ITEMS',
          TO_CHAR(:OLD.order_item_id),
          'order_id=' || :OLD.order_id || ', product_name=' || :OLD.product_name || ', qty=' || :OLD.qty ||
              ', created_at=' || TO_CHAR(:OLD.created_at, 'YYYY-MM-DD HH24:MI:SS'),
          'D'
        );
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE rollback_by_date(p_target_time IN TIMESTAMP) IS
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE orders DISABLE CONSTRAINT fk_orders_customer'; --отключили внеш ключи, чтобы не мешали при восстановлении данных
  EXECUTE IMMEDIATE 'ALTER TABLE order_items DISABLE CONSTRAINT fk_order_items_order';

  EXECUTE IMMEDIATE 'TRUNCATE TABLE order_items';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE orders';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE customers';
--восстанавливаем записи из аудит послед запись до указ времени. находим послденюю запись для каждого валью до таргет тайм
  INSERT INTO customers (customer_id, full_name, status_code, created_at)
  SELECT TO_NUMBER(pk_value),
         REGEXP_SUBSTR(changed_data, 'full_name=([^,]+)', 1, 1, NULL, 1),
         TO_NUMBER(REGEXP_SUBSTR(changed_data, 'status_code=([^,]+)', 1, 1, NULL, 1)),
         TO_DATE(REGEXP_SUBSTR(changed_data, 'created_at=([^,]+)', 1, 1, NULL, 1), 'YYYY-MM-DD HH24:MI:SS')
  FROM (
    SELECT a.*, ROW_NUMBER() OVER (PARTITION BY pk_value ORDER BY change_time DESC) rn
    FROM audit_log a
    WHERE table_name = 'CUSTOMERS'
      AND change_time <= p_target_time
  )
  WHERE rn = 1
    AND operation_type <> 'D';

  INSERT INTO orders (order_id, customer_id, order_date, comment_text, amount)
  SELECT TO_NUMBER(pk_value), --парсинг данных из строки
         TO_NUMBER(REGEXP_SUBSTR(changed_data, 'customer_id=([^,]+)', 1, 1, NULL, 1)),
         TO_DATE(REGEXP_SUBSTR(changed_data, 'order_date=([^,]+)', 1, 1, NULL, 1), 'YYYY-MM-DD HH24:MI:SS'),
         REGEXP_SUBSTR(changed_data, 'comment_text=([^,]+)', 1, 1, NULL, 1),
         TO_NUMBER(REGEXP_SUBSTR(changed_data, 'amount=([^,]+)', 1, 1, NULL, 1))
  FROM (
    SELECT a.*, ROW_NUMBER() OVER (PARTITION BY pk_value ORDER BY change_time DESC) rn
    FROM audit_log a
    WHERE table_name = 'ORDERS'
      AND change_time <= p_target_time
  )
  WHERE rn = 1
    AND operation_type <> 'D'; --отсекает удаленные

  INSERT INTO order_items (order_item_id, order_id, product_name, qty, created_at)
  SELECT TO_NUMBER(pk_value),
         TO_NUMBER(REGEXP_SUBSTR(changed_data, 'order_id=([^,]+)', 1, 1, NULL, 1)),
         REGEXP_SUBSTR(changed_data, 'product_name=([^,]+)', 1, 1, NULL, 1),
         TO_NUMBER(REGEXP_SUBSTR(changed_data, 'qty=([^,]+)', 1, 1, NULL, 1)),
         TO_DATE(REGEXP_SUBSTR(changed_data, 'created_at=([^,]+)', 1, 1, NULL, 1), 'YYYY-MM-DD HH24:MI:SS')
  FROM (
    SELECT a.*, ROW_NUMBER() OVER (PARTITION BY pk_value ORDER BY change_time DESC) rn
    FROM audit_log a
    WHERE table_name = 'ORDER_ITEMS'
      AND change_time <= p_target_time
  )
  WHERE rn = 1
    AND operation_type <> 'D';

  DELETE FROM audit_log WHERE change_time > p_target_time; --удаляем записи все после заданного времени

  COMMIT;

  EXECUTE IMMEDIATE 'ALTER TABLE orders ENABLE CONSTRAINT fk_orders_customer'; --включаем внешние ключи обратно
  EXECUTE IMMEDIATE 'ALTER TABLE order_items ENABLE CONSTRAINT fk_order_items_order';
  COMMIT;
END rollback_by_date;
/
--обертка
CREATE OR REPLACE PACKAGE rollback_pkg IS
  PROCEDURE rollback(p_value IN TIMESTAMP);
  PROCEDURE rollback(p_value IN NUMBER);
END rollback_pkg;
/

CREATE OR REPLACE PACKAGE BODY rollback_pkg AS

  PROCEDURE rollback(p_value IN TIMESTAMP) IS
  BEGIN
    rollback_by_date(p_value);
  END rollback;

  PROCEDURE rollback(p_value IN NUMBER) IS
    v_target TIMESTAMP;
  BEGIN
    v_target := SYSTIMESTAMP - (p_value / (24 * 60 * 60 * 1000));
    rollback_by_date(v_target);
  END rollback;

END rollback_pkg;
/

CREATE TABLE reports_logs (
    report_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    report_date TIMESTAMP DEFAULT SYSTIMESTAMP,
    report_content VARCHAR2(4000),
    CONSTRAINT pk_reports_logs PRIMARY KEY (report_id)
);
/

CREATE OR REPLACE PACKAGE report_pkg IS
  PROCEDURE create_report(p_start IN TIMESTAMP);
  PROCEDURE create_report;
END report_pkg;
/

CREATE OR REPLACE PACKAGE BODY report_pkg AS

  last_report_time TIMESTAMP := TO_TIMESTAMP('1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS');

  PROCEDURE create_report(p_start IN TIMESTAMP) IS
    v_ins_customers NUMBER;
    v_upd_customers NUMBER;
    v_del_customers NUMBER;
    v_ins_orders    NUMBER;
    v_upd_orders    NUMBER;
    v_del_orders    NUMBER;
    v_ins_items     NUMBER;
    v_upd_items     NUMBER;
    v_del_items     NUMBER;
    v_report        VARCHAR2(4000);
--подсчет изменение с момента времени
  BEGIN
    SELECT COUNT(*) INTO v_ins_customers
      FROM audit_log
      WHERE table_name = 'CUSTOMERS'
        AND operation_type = 'I'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_upd_customers
      FROM audit_log
      WHERE table_name = 'CUSTOMERS'
        AND operation_type = 'U'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_del_customers
      FROM audit_log
      WHERE table_name = 'CUSTOMERS'
        AND operation_type = 'D'
        AND change_time >= p_start;

    SELECT COUNT(*) INTO v_ins_orders
      FROM audit_log
      WHERE table_name = 'ORDERS'
        AND operation_type = 'I'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_upd_orders
      FROM audit_log
      WHERE table_name = 'ORDERS'
        AND operation_type = 'U'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_del_orders
      FROM audit_log
      WHERE table_name = 'ORDERS'
        AND operation_type = 'D'
        AND change_time >= p_start;

    SELECT COUNT(*) INTO v_ins_items
      FROM audit_log
      WHERE table_name = 'ORDER_ITEMS'
        AND operation_type = 'I'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_upd_items
      FROM audit_log
      WHERE table_name = 'ORDER_ITEMS'
        AND operation_type = 'U'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_del_items
      FROM audit_log
      WHERE table_name = 'ORDER_ITEMS'
        AND operation_type = 'D'
        AND change_time >= p_start;

-- Создание HTML отчета с переносами строк
v_report := '<html>' || CHR(10) ||
            '<head><title>Отчет об изменениях</title></head>' || CHR(10) ||
            '<body>' || CHR(10) ||
            '<h1>Отчет об изменениях с ' || TO_CHAR(p_start, 'YYYY-MM-DD HH24:MI:SS') || '</h1>' || CHR(10) ||
            '<table border="1" cellspacing="0" cellpadding="4">' || CHR(10) ||
            '<tr><th>Таблица</th><th>INSERT</th><th>UPDATE</th><th>DELETE</th></tr>' || CHR(10) ||
            '<tr><td>CUSTOMERS</td><td>' || v_ins_customers || '</td><td>' || v_upd_customers || '</td><td>' || v_del_customers || '</td></tr>' || CHR(10) ||
            '<tr><td>ORDERS</td><td>' || v_ins_orders || '</td><td>' || v_upd_orders || '</td><td>' || v_del_orders || '</td></tr>' || CHR(10) ||
            '<tr><td>ORDER_ITEMS</td><td>' || v_ins_items || '</td><td>' || v_upd_items || '</td><td>' || v_del_items || '</td></tr>' || CHR(10) ||
            '</table>' || CHR(10) ||
            '</body>' || CHR(10) ||
            '</html>';

    INSERT INTO reports_logs (report_date, report_content)
      VALUES (SYSTIMESTAMP, v_report);
    COMMIT;

    DBMS_OUTPUT.PUT_LINE(v_report);

    last_report_time := SYSTIMESTAMP;
  END create_report;

  PROCEDURE create_report IS
  BEGIN
    create_report(last_report_time);
  END create_report;

END report_pkg;
/
-------------------------------
CREATE OR REPLACE DIRECTORY reports_dir AS 'C:\oracle_reports';
GRANT READ, WRITE ON DIRECTORY reports_dir TO C##KSUSHA;

CREATE OR REPLACE PACKAGE BODY report_pkg AS

  last_report_time TIMESTAMP := TO_TIMESTAMP('1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS');

  PROCEDURE create_report(p_start IN TIMESTAMP) IS
    v_ins_customers NUMBER;
    v_upd_customers NUMBER;
    v_del_customers NUMBER;
    v_ins_orders    NUMBER;
    v_upd_orders    NUMBER;
    v_del_orders    NUMBER;
    v_ins_items     NUMBER;
    v_upd_items     NUMBER;
    v_del_items     NUMBER;
    v_report        VARCHAR2(4000);
    file_handle     UTL_FILE.FILE_TYPE;
  BEGIN
    -- Сбор данных для отчета
    SELECT COUNT(*) INTO v_ins_customers
      FROM audit_log
      WHERE table_name = 'CUSTOMERS'
        AND operation_type = 'I'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_upd_customers
      FROM audit_log
      WHERE table_name = 'CUSTOMERS'
        AND operation_type = 'U'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_del_customers
      FROM audit_log
      WHERE table_name = 'CUSTOMERS'
        AND operation_type = 'D'
        AND change_time >= p_start;

    SELECT COUNT(*) INTO v_ins_orders
      FROM audit_log
      WHERE table_name = 'ORDERS'
        AND operation_type = 'I'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_upd_orders
      FROM audit_log
      WHERE table_name = 'ORDERS'
        AND operation_type = 'U'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_del_orders
      FROM audit_log
      WHERE table_name = 'ORDERS'
        AND operation_type = 'D'
        AND change_time >= p_start;

    SELECT COUNT(*) INTO v_ins_items
      FROM audit_log
      WHERE table_name = 'ORDER_ITEMS'
        AND operation_type = 'I'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_upd_items
      FROM audit_log
      WHERE table_name = 'ORDER_ITEMS'
        AND operation_type = 'U'
        AND change_time >= p_start;
    SELECT COUNT(*) INTO v_del_items
      FROM audit_log
      WHERE table_name = 'ORDER_ITEMS'
        AND operation_type = 'D'
        AND change_time >= p_start;

    -- Создание HTML отчета
    v_report := '<html><head><title>Отчет об изменениях</title></head><body>';
    v_report := v_report || '<h1>Отчет об изменениях с ' || TO_CHAR(p_start, 'YYYY-MM-DD HH24:MI:SS') || '</h1>';
    v_report := v_report || '<table border="1" cellspacing="0" cellpadding="4">';
    v_report := v_report || '<tr><th>Таблица</th><th>INSERT</th><th>UPDATE</th><th>DELETE</th></tr>';
    v_report := v_report || '<tr><td>CUSTOMERS</td><td>' || v_ins_customers || '</td><td>' || v_upd_customers || '</td><td>' || v_del_customers || '</td></tr>';
    v_report := v_report || '<tr><td>ORDERS</td><td>' || v_ins_orders || '</td><td>' || v_upd_orders || '</td><td>' || v_del_orders || '</td></tr>';
    v_report := v_report || '<tr><td>ORDER_ITEMS</td><td>' || v_ins_items || '</td><td>' || v_upd_items || '</td><td>' || v_del_items || '</td></tr>';
    v_report := v_report || '</table></body></html>';

    -- Запись отчета в таблицу logs
    INSERT INTO reports_logs (report_date, report_content)
      VALUES (SYSTIMESTAMP, v_report);
    COMMIT;

    -- Вывод отчета в консоль
    DBMS_OUTPUT.PUT_LINE(v_report);

    -- Запись отчета в файл
    file_handle := UTL_FILE.FOPEN('REPORTS_DIR', 'report_' || TO_CHAR(SYSTIMESTAMP, 'YYYYMMDD_HH24MI') || '.html', 'w', 32767);

    -- Запись отчета в файл
    UTL_FILE.PUT_LINE(file_handle, v_report);

    -- Закрытие файла
    UTL_FILE.FCLOSE(file_handle);

    -- Обновление времени последнего отчета
    last_report_time := SYSTIMESTAMP;
  END create_report;

  PROCEDURE create_report IS
  BEGIN
    create_report(last_report_time);
  END create_report;

END report_pkg;
/


------------------------------
INSERT INTO customers (full_name, status_code) VALUES ('Alice', 1);
INSERT INTO customers (full_name, status_code) VALUES ('Bob', 2);
INSERT INTO customers (full_name, status_code) VALUES ('Ksusha', 3);
INSERT INTO customers (full_name, status_code) VALUES ('Ksusha1', 4);
COMMIT;

INSERT INTO orders (customer_id, comment_text, amount)
VALUES (1, 'Заказ от Alice', 150);
INSERT INTO orders (customer_id, comment_text, amount)
VALUES (2, 'Заказ от Bob', 250);
COMMIT;

INSERT INTO order_items (order_id, product_name, qty)
VALUES (1, 'Товар A', 2);
INSERT INTO order_items (order_id, product_name, qty)
VALUES (1, 'Товар B', 5);
COMMIT;

UPDATE customers
   SET full_name = 'Alice Updated'
 WHERE customer_id = 1;

INSERT INTO orders (customer_id, comment_text, amount)
VALUES (1, 'Дополнительный заказ', 300);

DELETE FROM order_items
 WHERE order_item_id = 1;

COMMIT;

SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM order_items;

BEGIN
  rollback_pkg.rollback(TIMESTAMP '2025-04-23 14:49:00');-- после записи удаляются
END;


BEGIN
  rollback_pkg.rollback(10000);
END;

COMMIT;


BEGIN
  report_pkg.create_report(TIMESTAMP '2025-04-23 10:00:00');--от времени все записи
END;

SET SERVEROUTPUT ON;
BEGIN
  report_pkg.create_report();
END;