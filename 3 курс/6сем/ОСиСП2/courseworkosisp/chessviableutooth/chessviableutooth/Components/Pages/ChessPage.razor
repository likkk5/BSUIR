@page "/chess"
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE
@inject IJSRuntime JS
@inject chessviableutooth.Services.ChessGameService ChessGame
@inject IAdapter Adapter

<h3>♟ Bluetooth Шахматы</h3>
<div id="chessboard" style="width: 400px"></div>
<p id="status">Загрузка...</p>
<p><b>FEN:</b> <span id="fen"></span></p>
<p><b>PGN:</b> <span id="pgn"></span></p>

<button @onclick="ResetGame">🔄 Начать заново</button>
<button onclick="clearBoard()">🧹 Очистить доску</button>
<button onclick="startPosition()">🏁 Стартовая позиция</button>
<button onclick="flipBoard()">🔄 Перевернуть доску</button>
<button onclick="setWhiteOrientation()">⚪ Белая ориентация</button>
<button onclick="setBlackOrientation()">⚫ Чёрная ориентация</button>
<button onclick="showOrientation()">🔍 Показать ориентацию</button>

@code {
    private DotNetObjectReference<ChessPage>? objRef;
    private IDevice? ConnectedDevice;
    private ICharacteristic? ChessCharacteristic;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("loadBoard", "start", objRef);

            // Подключение к Bluetooth-устройству
            ConnectedDevice = Adapter.ConnectedDevices.FirstOrDefault();
            if (ConnectedDevice != null)
            {
                await SetupBluetooth();
            }
        }
    }

    async Task SetupBluetooth()
    {
        if (ConnectedDevice == null) return;

        var services = await ConnectedDevice.GetServicesAsync();
        var service = services.FirstOrDefault(s => s.Id == Guid.Parse("0000180D-0000-1000-8000-00805f9b34fb"));

        if (service != null)
        {
            var characteristics = await service.GetCharacteristicsAsync();
            ChessCharacteristic = characteristics.FirstOrDefault(c => c.Id == Guid.Parse("00002a37-0000-1000-8000-00805f9b34fb"));

            if (ChessCharacteristic != null && ChessCharacteristic.CanUpdate)
            {
                ChessCharacteristic.ValueUpdated += OnMoveReceived;
                await ChessCharacteristic.StartUpdatesAsync();
                Console.WriteLine("✅ Подписка на Bluetooth ходы активирована");
            }
        }
    }

    private void OnMoveReceived(object sender, Plugin.BLE.Abstractions.EventArgs.CharacteristicUpdatedEventArgs e)
    {
        var move = System.Text.Encoding.UTF8.GetString(e.Characteristic.Value);
        Console.WriteLine($"🔔 Получен ход по Bluetooth: {move}");

        InvokeAsync(async () =>
        {
            await JS.InvokeVoidAsync("receiveMove", move);
        });
    }

    [JSInvokable]
    public async Task<bool> MakeMove(string move)
    {
        bool moveSuccess = ChessGame.MakeMove(move);

        if (moveSuccess)
        {
            string fen = ChessGame.GetFen();
            await JS.InvokeVoidAsync("updateBoard", fen, move); 
            await SendMove(move);
            return true;
        }
        return false;
    }

    async Task SendMove(string move)
    {
        if (ChessCharacteristic != null)
        {
            try
            {
                await ChessCharacteristic.WriteAsync(System.Text.Encoding.UTF8.GetBytes(move));
                Console.WriteLine($"📤 Ход отправлен по Bluetooth: {move}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Ошибка отправки хода: {ex.Message}");
            }
        }
    }

    async Task ResetGame()
    {
        ChessGame.ResetGame();
        await JS.InvokeVoidAsync("updateBoard", "start");
    }

    public void Dispose()
    {
        objRef?.Dispose();
        if (ChessCharacteristic != null)
        {
            ChessCharacteristic.ValueUpdated -= OnMoveReceived;
        }
    }
}
